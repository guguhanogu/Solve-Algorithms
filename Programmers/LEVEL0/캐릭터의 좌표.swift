// MARK: - 캐릭터의 좌표
/// 머쓱이는 RPG게임을 하고 있습니다.
/// 게임에는 up, down, left, right 방향키가 있으며
/// 각 키를 누르면 위, 아래, 왼쪽, 오른쪽으로 한 칸씩 이동합니다.
/// 예를 들어 [0,0]에서 
/// up을 누른다면 캐릭터의 좌표는 [0, 1],
/// down을 누른다면 [0, -1],
/// left를 누른다면 [-1, 0],
/// right를 누른다면 [1, 0]입니다.

/// 머쓱이가 입력한 방향키의 배열 keyinput와 맵의 크기 board이 매개변수로 주어집니다.
/// 캐릭터는 항상 [0,0]에서 시작할 때
/// 키 입력이 모두 끝난 뒤에 캐릭터의 좌표 [x, y]를 return하도록 solution 함수를 완성해주세요.

/// [0, 0]은 board의 정 중앙에 위치합니다.
/// 예를 들어 board의 가로 크기가 9라면
/// 캐릭터는 왼쪽으로 최대 [-4, 0]까지
/// 오른쪽으로 최대 [4, 0]까지 이동할 수 있습니다.

import Foundation

func solution(_ keyinput:[String], _ board:[Int]) -> [Int] {
    
    let maxX: Int = (board[0] - 1) / 2      /// 캐릭터가 최대로 움직일 수 있는 x좌표
    let maxY: Int = (board[1] - 1) / 2      /// 캐릭터가 최대로 움직일 수 있는 y좌표
    
    var x: Int = 0      /// 현재 캐릭터의 x좌표: 0부터 시작.
    var y: Int = 0      /// 현재 캐릭터의 y좌표: 0부터 시작.
    
    /// keyinput에서 key 입력 값을 순서대로 하나씩 받아온다.
    for key in keyinput {
        switch key {
            case "left":                            /// 왼쪽
            x += (x - 1) < (maxX * -1) ? 0 : -1     /// 왼쪽으로 더 갈 수 있으면 x좌표 값에 -1을 더하고, 그렇지 않으면 더하지 않는다.
            case "right":                           /// 오른쪽
            x += (x + 1) > maxX ? 0 : 1             /// 오른쪽으로 더 갈 수 있으면 x좌표 값에 1을 더하고, 그렇지 않으면 더하지 않는다.
            case "up":                              /// 위쪽
            y += (y + 1) > maxY ? 0 : 1             /// 위쪽으로 더 갈 수 있으면 y좌표 값에 1을 더하고, 그렇지 않으면 더하지 않는다.
            case "down":                            /// 아래쪽
            y += (y - 1) < (maxY * -1) ? 0 : -1     /// 아래쪽으로 더 갈 수 있으면 y좌표 값에 -1을 더하고, 그렇지 않으면 더하지 않는다.
            default:
            continue
        }
    }
    
    /// 이동을 모두 완료한 뒤에 x, y 좌표를 return 한다.
    return [x, y]
}